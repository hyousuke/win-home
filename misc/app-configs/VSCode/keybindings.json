[
    // ========================================================================
    // のどかの EmacsMinimum keymap で定義している Emacs-like なキーバインドの
    // 影響を抑えるための設定
    //
    // (例) C-x C-f は Awesome Emacs Keymap で workbench.action.quickOpen
    //      に割り当てられているが、のどかが C-f を right に変換して VSCode
    //      に渡してしまうため C-x right(workbench.action.nextEditor) が
    //      実行されてしまう。そこで、C-x right に quickOpen をユーザー
    //      カスタマイズとして割り当てる。nextEditor の割り当ては上書き
    //      されてしまうが、ショートカットキーでの呼び出しを諦めるか、
    //      別のショートカットキーをアサインする。
    {
        "key": "ctrl+x right",
        "command": "workbench.action.quickOpen",
        "when": "!terminalFocus"
    },


    // ========================================================================
    // AwesomeEmacsKeymap から不要なものを削除
    //

    // C-j を削除
    {
        "key": "ctrl+j",
        "command": "-emacs-mcx.newLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+j",
        "command": "-emacs-mcx.isearchExit",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },

    // Sexp 関連のショートカットを削除
    {
        "key": "ctrl+alt+f",
        "command": "-emacs-mcx.paredit.forwardSexp",
        "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
    },
    {
        "key": "ctrl+alt+f",
        "command": "-emacs-mcx.paredit.forwardSexp",
        "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-emacs-mcx.paredit.backwardSexp",
        "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-emacs-mcx.paredit.backwardSexp",
        "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus"
    },
    {
        "key": "ctrl+alt+backspace",
        "command": "-emacs-mcx.paredit.backwardKillSexp",
        "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
    },
    {
        "key": "ctrl+alt+backspace",
        "command": "-emacs-mcx.paredit.backwardKillSexp",
        "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus"
    },
    {
        "key": "escape ctrl+backspace",
        "command": "-emacs-mcx.paredit.backwardKillSexp",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus"
    },
    {
        "key": "ctrl+oem_4 ctrl+backspace",
        "command": "-emacs-mcx.paredit.backwardKillSexp",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus"
    },
    {
        "key": "escape ctrl+b",
        "command": "-emacs-mcx.paredit.backwardSexp",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus"
    },
    {
        "key": "ctrl+oem_4 ctrl+b",
        "command": "-emacs-mcx.paredit.backwardSexp",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus"
    },
    {
        "key": "escape ctrl+f",
        "command": "-emacs-mcx.paredit.forwardSexp",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus"
    },
    {
        "key": "ctrl+oem_4 ctrl+f",
        "command": "-emacs-mcx.paredit.forwardSexp",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus"
    },
    {
        "key": "ctrl+alt+k",
        "command": "-emacs-mcx.paredit.killSexp",
        "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
    },
    {
        "key": "ctrl+alt+k",
        "command": "-emacs-mcx.paredit.killSexp",
        "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus"
    },
    {
        "key": "escape ctrl+k",
        "command": "-emacs-mcx.paredit.killSexp",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus"
    },
    {
        "key": "ctrl+oem_4 ctrl+k",
        "command": "-emacs-mcx.paredit.killSexp",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus"
    },
    {
        "key": "ctrl+shift+alt+2",
        "command": "-emacs-mcx.paredit.markSexp",
        "when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
    },
    {
        "key": "ctrl+shift+alt+2",
        "command": "-emacs-mcx.paredit.markSexp",
        "when": "config.emacs-mcx.useMetaPrefixMacCmd && editorTextFocus"
    },
    {
        "key": "escape ctrl+shift+2",
        "command": "-emacs-mcx.paredit.markSexp",
        "when": "config.emacs-mcx.useMetaPrefixEscape && editorTextFocus"
    },
    {
        "key": "ctrl+oem_4 ctrl+shift+2",
        "command": "-emacs-mcx.paredit.markSexp",
        "when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket && editorTextFocus"
    },


    // ========================================================================
    // VSCode デフォルトの C-k シーケンスを C-A-k シーケンスに再割り当て
    //
    //   - AwesomeEmacsKeymap が C-k (kill-line) を使用しているため、VSCode デフォルト
    //     の C-k シーケンスが使用できない。そこでそれらを C-A-k シーケンスに割り当てる。
    //   - AwesomeEmacsKeymap で割り当てられる C-A-k (kill-sexp) を削除しておく。
    //   - 必要と応じて default keyboard shortcuts から定義を持ってきて修正する。
    //   - のどかによりキー入力が変更されているので注意 (C-f -> right など)。

    {
        "key": "ctrl+alt+k ctrl+c",
        "command": "editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+k ctrl+u",
        "command": "editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
        {
        "key": "ctrl+alt+k right", // C-f -> right (のどか)
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+k f12",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+alt+k ctrl+f12",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+alt+k ctrl+x",
        "command": "editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+k ctrl+oem_comma",
        "command": "editor.createFoldingRangeFromSelection",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+i",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+alt+k ctrl+0",
        "command": "editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+oem_2",
        "command": "editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+oem_minus",
        "command": "editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+8",
        "command": "editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+1",
        "command": "editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+2",
        "command": "editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+3",
        "command": "editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+4",
        "command": "editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+5",
        "command": "editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+6",
        "command": "editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+7",
        "command": "editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+oem_4",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+oem_period",
        "command": "editor.removeManualFoldingRanges",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+l",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+shift+l",
        "command": "editor.toggleFoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+j",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+oem_plus",
        "command": "editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+9",
        "command": "editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k ctrl+oem_6",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+alt+k o",
        "command": "workbench.action.copyEditorToNewWindow",
        "when": "activeEditor"
    },
    {
        "key": "ctrl+alt+k p",
        "command": "workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "ctrl+alt+k ctrl+o",
        "command": "workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+alt+k r",
        "command": "workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+alt+k enter",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "ctrl+alt+k ctrl+r",
        "command": "workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+alt+k ctrl+q",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+alt+k ctrl+s",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+alt+k shift+enter",
        "command": "workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "ctrl+alt+k shift+enter",
        "command": "workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+alt+k ctrl+t",
        "command": "workbench.action.selectTheme"
    },
    {
        "key": "ctrl+alt+k up", // C-p -> up (のどか)
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+alt+k ctrl+m",
        "command": "workbench.action.toggleMaximizeEditorGroup",
        "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
    },
    {
        "key": "ctrl+alt+k z",
        "command": "workbench.action.toggleZenMode",
        "when": "!isAuxiliaryWindowFocusedContext"
    },
    {
        "key": "ctrl+alt+k c",
        "command": "workbench.files.action.compareWithClipboard"
    },
    {
        "key": "ctrl+alt+k d",
        "command": "workbench.files.action.compareWithSaved"
    },
    {
        "key": "ctrl+alt+k e",
        "command": "workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "ctrl+alt+k v",
        "command": "markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },

    // ========================================================================
    // その他
    //

    // C-. を QuickFix から nextEditorInGroup に変更。
    // これまで C-. に割り当てられていたコマンドは C-A-. に割り当てる。
    {
        "key": "ctrl+oem_period",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+alt+oem_period",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+oem_period",
        "command": "workbench.action.terminal.showQuickFixes",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+alt+oem_period",
        "command": "acceptSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+alt+oem_period",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
    },

    // C-, を openSettings から previousEditorInGroup に変更。
    // これまで C-, に割り当てられていたコマンドは C-A-, に割り当てる。
    {
        "key": "ctrl+oem_comma",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+alt+oem_comma",
        "command": "workbench.action.openSettings"
    },
 
    // Sidebar/Panel のトグル
    // C-j はトグルや View の切り替えのためのプリフィクスとして使う。
    {
        "key": "ctrl+j ctrl+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j ctrl+s",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+j ctrl+a",
        "command": "workbench.action.toggleAuxiliaryBar"
    },

    // View の移動
    {
        "key": "ctrl+j e",
        "command": "workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        // デフォルトの when 条件を有効にすると何故か効かない。
        "key": "ctrl+j f",
        "command": "workbench.view.search",
        // "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
        "when": "workbench.view.search.active"
    },
    {
        "key": "ctrl+j d",
        "command": "workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+j g",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "ctrl+j x",
        "command": "workbench.view.extensions",
        "when": "viewContainer.workbench.view.extensions.enabled"
    },
    {
        "key": "ctrl+j c",
        "command": "workbench.view.extension.containersView"
    },
    {
        "key": "ctrl+j r",
        "command": "workbench.view.remote"
    },

    // Editor を次/前のグループに移動
    {
        "key": "ctrl+x ctrl+oem_period",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+x ctrl+oem_comma",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+x g",
        "command": "magit.status"
    },
    {
        "key": "alt+x g",
        "command": "-magit.status"
    },
]